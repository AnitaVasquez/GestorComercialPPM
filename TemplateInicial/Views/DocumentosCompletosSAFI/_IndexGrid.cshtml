@** Fecha de cotización
    * Codigo de cotización
    * Fecha de pre-factura
    * Código de prefactura
    * Detalle
    * Subtotal
    * IVA
    * Total
    * Fecha de factura
    * Número de Factura
    * Número de Nota Crédito
    * Nueva factura (Número)
    * Fecha de Retención
    * Número comprobante de retención
    * Cobrado / No Cobrado*@

@model IEnumerable<GestionPPM.Entidades.Modelo.PrefacturaSAFIInfo>
@{
    var acciones = (List<string>)ViewBag.AccionesUsuario;
}
@(Html
                .Grid(Model)
                .Build(columns =>
                {
                    columns.Add(model => "<input class='seleccion-item' type='checkbox' id= \"" + model.id_facturacion_safi + "\" />").Titled(Html.CheckBox("CheckAll", false, new { @id = "seleccionar-todo", @title = "Seleccionar todos los elementos mostrados en la página." })).Encoded(false);
                    columns.Add(model => model.id_facturacion_safi).Titled("ID Documento").Css("hidden");
                    columns.Add(model => model.codigo_cotizacion).Titled("Código de Cotización").AppendCss("celda-grande");
                    columns.Add(model => model.fecha_prefactura).Titled("Fecha").Formatted("{0:d}").AppendCss("celda-grande");
                    columns.Add(model => model.numero_prefactura).Titled("Número PreFactura").AppendCss("celda-grande");
                    columns.Add(model => model.detalle_cotizacion).Titled("Detalle").AppendCss("celda-grande");
                    columns.Add(model => (((Math.Round(model.subtotal_pago, 2).ToString("N2").Replace(",", "-")).Replace(".", ",")).Replace("-", "."))).Titled("Subtotal").AppendCss("celda-grande");
                    columns.Add(model => (((Math.Round(model.iva_pago, 2).ToString("N2").Replace(",", "-")).Replace(".", ",")).Replace("-", "."))).Titled("IVA").AppendCss("celda-grande");
                    columns.Add(model => (((Math.Round(model.total_pago, 2).ToString("N2").Replace(",", "-")).Replace(".", ",")).Replace("-", "."))).Titled("Total").AppendCss("celda-grande");
                    columns.Add(model => model.numero_factura).Titled("Número de Factura").AppendCss("celda-grande");
                    columns.Add(model => model.numero_nota_credito).Titled("Número de Nota de Crédito").AppendCss("celda-grande");
                    columns.Add(model => model.numero_retencion).Titled("Número de Retención").AppendCss("celda-grande");
                    columns.Add(model => model.AprobacionFinal).Titled("Aprobada").AppendCss("celda-grande");
                    columns.Add(model => model.EstadoDocumento).Titled("Estado Documento").AppendCss("celda-grande");
                    columns.Add(model =>
                     " <button style='background-color:#FFC52D;border-color: #FFC52D;'  class='btn btn-warning " + Auxiliares.GestionBontonesGrid(acciones, "ACCIONES-SIST-01-GEN-PREFAC") + "' onclick='location.href=\"" + @Url.Action("GeneracionPrefactura", "DocumentosCompletosSAFI", new { listadoIDs = model.id_facturacion_safi, descargaDirecta = true }) + "\"' id='imprimir-prefactura' data-id=\"" + model.id_facturacion_safi + "\"><span class='glyphicon glyphicon-print' aria-hidden='true' style='color:black'></span></button>").AppendCss("celda-pequenia").Encoded(false);
                })
                //.RowAttributed(model => new { data_id = model.CuerpoCorreo })
                .Empty(Mensajes.MensajeNoDataListado)
                .Id("grid-DocumentoSAFI")
                .Pageable(pager =>
                {
                    pager.PagesToDisplay = 5;
                    pager.RowsPerPage = 10;
                })
                .Filterable()
                .Sortable())




